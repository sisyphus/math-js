# Use JS calculator at https://playcode.io/new
use strict;
use warnings;

use Math::JS;
use Test::More;

cmp_ok(Math::JS->new(2147483648),  '==',  2147483648, "test 1");
cmp_ok(Math::JS->new(-2147483648), '==', -2147483648, "test 2");

my $x = Math::JS->new(1073741824);
my $y = Math::JS->new(1073741824);

cmp_ok($x + $y, '==', 2147483648, '1073741824 + 1073741824 => 2147483648');

$y += 2; # 1073741826

cmp_ok($x + $y,               '==', 2147483650, '1073741824 + 1073741824 => 2147483650');
cmp_ok($x + (($y / 2)   * 2), '==', 2147483650, '1073741824 + ((1073741826 /  2)  * 2) => 2147483650');
cmp_ok($x + (($y >> 1)  * 2), '==', 2147483650, '1073741824 + ((1073741826 >> 1)  * 2) => 2147483650');
cmp_ok($x + (($y >> 1) << 1), '==', 2147483650, '1073741824 + ((1073741826 >> 1) << 1) => 2147483650');
cmp_ok((($x >> 1) << 1) + (($y >> 1) << 1), '==', 2147483650, '((1073741824 >> 1) << 1) + ((1073741826 >> 1) << 1) => 2147483650');
cmp_ok((($x >> 1) *  2) + (($y >> 1)  * 2), '==', 2147483650, '((1073741824 >> 1) *  2) + ((1073741826 >> 1) *  2) => 2147483650');
cmp_ok(($x >> 1) * 4, '==', 2147483648, '((1073741824 >> 1) * 4 => 2147483648');

cmp_ok(($x >> 1) + ($x >> 1) + ($x >> 1) + ($x >> 1), '==', 2147483648, "addition and multiplication agree");
cmp_ok($x << 1, '==', -2147483648, '1073741824 << 1 => -2147483648');
cmp_ok($x  * 2, '==',  2147483648, '1073741824  * 2 =>  2147483648');

$x = Math::JS->new(2147483648);
cmp_ok($x->{type}, 'eq', 'uint32', '2147483648 is uint32');

my $t = Math::JS ->new(2147483648);

cmp_ok($t->{type}, 'eq', 'uint32', "2147483648 is 'uint32'" );

my $rs = $t >> 1;
cmp_ok($rs, '==', -1073741824, "2147483648 >> 1 is -1073741824");
cmp_ok($rs->{type}, 'eq', 'sint32', "2147483648 >> 1 is 'sint32'");

$rs = $t >> 10;
cmp_ok($rs, '==', -2097152, "2147483648 >> 10 is -2097152");
cmp_ok($rs->{type}, 'eq', 'sint32', "2147483648 >> 10 is 'sint32'");

##############################################################
$t = Math::JS->new(4294967291);
cmp_ok($t->{type}, 'eq', 'uint32', "4294967291 is 'uint32'");
$rs = $t >> 2;
cmp_ok($rs, '==', -2, "4294967291 >> 2 is -2");
cmp_ok($rs->{type}, 'eq', 'sint32', "4294967291 >> 2 is  'sint32'");

$rs = $t >> 3;
cmp_ok($rs, '==', -1, "4294967291 >> 3 is -1");
cmp_ok($rs->{type}, 'eq', 'sint32', "4294967291 >> 3 is  'sint32'");

$t = Math::JS->new(-12345678);
cmp_ok($t->{type}, 'eq', 'sint32', "-12345678 is 'sint32'");
$rs = $t >> 6;
cmp_ok($rs, '==', -192902, "-12345678 >> 6 is -192902");
cmp_ok($rs->{type}, 'eq', 'sint32', "-12345678 >> 6 is  'sint32'");
###############################################################

$t = $x >> 1;
cmp_ok($t->{type}, 'eq', 'sint32', '2147483648 >> 1 is sint32');
cmp_ok(($t + $t)->{type}, 'eq', 'sint32', "'sint32' as expected");
cmp_ok(($x >> 1) + ($x >> 1), '==', -2147483648,  '(2147483648 >> 1) + (2147483648 >> 1) => -2147483648');
cmp_ok(($x >> 1) * 2, '==', -2147483648,  '(2147483648 >> 1) * 2 => -2147483648');

cmp_ok(Math::JS->new(-16) << 2, '==', -64, '-16 << 2 => -64');
cmp_ok(Math::JS->new(1169367104) << 5, '==', -1234958336, '1169367104 << 5 => -1234958336');
cmp_ok((Math::JS->new(2147483648) >> 1) * 2, '==', -2147483648, '(2147483648 >> 1) * 2 => -2147483648');
cmp_ok((Math::JS->new(536870912)  << 1) * 2, '==',  2147483648, '(536870912 <<  1) * 2 =>  2147483648');
cmp_ok(Math::JS->new(536870912) << 1, '==', 1073741824, '536870912 << 1 => 1073741824');
cmp_ok(Math::JS->new(536870912) << 2, '==', -2147483648, '536870912 << 2 => -2147483648');
cmp_ok(Math::JS->new(33554432) ** 2, '==', 1125899906842624,  '33554432 ** 2 => 1125899906842624');
cmp_ok((Math::JS->new(33554432) >> 1) ** 2, '==', 281474976710656,  '(33554432 >> 1) ** 2 => 281474976710656');
cmp_ok((Math::JS->new(16777216) << 1) ** 2, '==', 1125899906842624,  '(16777216 << 1) ** 2 => 1125899906842624');

cmp_ok((Math::JS->new(2147483648) >> 1) + (Math::JS->new(2147483648) >> 1), '==', -2147483648,
        '(2147483648 >> 1) + (2147483648 >> 1) => -2147483648');

cmp_ok((Math::JS->new(536870912) << 1) + (Math::JS->new(536870912) << 1), '==', 2147483648,
        '(536870912 << 1) + (536870912 << 1) => 2147483648');

cmp_ok((Math::JS->new(536870912) << 1) + (Math::JS->new(2147483648) >> 1), '==', 0,
        '(536870912 << 1) + (2147483648 >> 1) => 0');

cmp_ok((Math::JS->new(2147483648) >> 1) + (Math::JS->new(536870912) << 1), '==', 0,
        '(2147483648 >> 1) + (536870912 << 1) => 0');

cmp_ok(Math::JS->new(536870912) << 1, '==',  1073741824, '536870912  << 1 =>  1073741824');
cmp_ok(Math::JS->new(2147483648) >> 1, '==', -1073741824, '2147483648  >> 1 => -1073741824');

cmp_ok(Math::JS->new(-1) << 31, '==', -2147483648,  '-1 << 31 => -2147483648');
cmp_ok(Math::JS->new(-1) << 63, '==', -2147483648,  '-1 << 63 => -2147483648');
cmp_ok(Math::JS->new(-1) << 40, '==', -256,  '-1 << 40 => -256');
cmp_ok(Math::JS->new(-1) << 50, '==', -262144,  '-1 << 50 => -262144');

cmp_ok(Math::JS->new(9007199254740900) / 7, '==', 1286742750677271.5, '9007199254740900 / 7 => 1286742750677271.5');

for(0..33) {
  cmp_ok(Math::JS->new(-2147483648) >> $_, '==', -2147483648 / (2 ** ($_ % 32)), "-2147483648 >> $_ is as expected");
}

for(1..31, 33) {
  cmp_ok(Math::JS->new(-2147483647) >> $_, '==', -2147483648 / (2 ** ($_ % 32)), "-2147483647 >> $_ is as expected");
}

for(0, 32) {
  cmp_ok(Math::JS->new(-2147483647) >> $_, '==', -2147483647, "-2147483647 >> $_ is -2147483647");
}

cmp_ok(Math::JS->new(4294967295) & Math::JS->new(429496729), '==', 429496729, '4294967295 & 429496729 => 429496729');
cmp_ok(Math::JS->new(2147483648) & Math::JS->new(429496729), '==', 0, '2147483648 & 429496729 => 0');
cmp_ok(Math::JS->new(2147483647) & Math::JS->new(429496729), '==', 429496729, '2147483647 & 429496729 => 429496729');
cmp_ok(Math::JS->new(-1) & Math::JS->new(429496729), '==', 429496729, '-1 & 429496729 => 429496729');

cmp_ok(Math::JS->new(4294967290) >> 1, '==', -3, '4294967290 >> 1 => -3');
cmp_ok(Math::JS->new(4294967291) >> 1, '==', -3, '4294967291 >> 1 => -3');
cmp_ok(Math::JS->new(4294967292) >> 1, '==', -2, '4294967292 >> 1 => -2');
cmp_ok(Math::JS->new(4294967293) >> 1, '==', -2, '4294967293 >> 1 => -2');
cmp_ok(Math::JS->new(4294967294) >> 1, '==', -1, '4294967294 >> 1 => -1');
cmp_ok(Math::JS->new(4294967295) >> 1, '==', -1, '4294967295 >> 1 => -1');

cmp_ok(~Math::JS->new(0), '==', -1, "~0 == -1");
cmp_ok(~Math::JS->new(Math::JS::MAX_ULONG), '==', 0, "~MAX_ULONG == 0");
cmp_ok(~Math::JS->new(Math::JS::MAX_SLONG), '==', -2147483648, "~MAX_SLONG == -2147483648");
cmp_ok(~Math::JS->new(Math::JS::MIN_ULONG), '==', 2147483647, "~MIN_ULONG == 2147483647");
cmp_ok(~Math::JS->new(Math::JS::MIN_SLONG), '==', 2147483647, "~MIN_SLONG == 2147483647");
cmp_ok(~Math::JS->new(Math::JS::LOW_31BIT), '==', -1073741825, "~LOW_31BIT == -1073741825");
cmp_ok(~Math::JS->new(1111111111), '==', -1111111112, "~1111111111 == -1111111112");

cmp_ok(Math::JS->new(Math::JS::MAX_ULONG) ^ Math::JS->new(Math::JS::MIN_SLONG), '==', 2147483647, "4294967295 ^ -2147483648 == 2147483647");
cmp_ok(Math::JS->new(Math::JS::MIN_SLONG) ^ Math::JS->new(Math::JS::MAX_ULONG), '==', 2147483647, "-2147483648 ^ 4294967295 == 2147483647");
cmp_ok(Math::JS->new(4294967295) ^ Math::JS->new(100), '==', -101, "4294967295 ^ 100 == -101");

cmp_ok(Math::JS->new(3294967295) ^ Math::JS->new(1000), '==', -999999977, "294967295 ^ 1000 == -999999977");
cmp_ok(Math::JS->new(3294967295) ^ Math::JS->new(10000), '==', -1000008977, "3294967295 ^ 10000 == -1000008977");
cmp_ok(Math::JS->new(94967295) ^ Math::JS->new(100000), '==', 94933855, "94967295 ^ 100000 == 94933855");
cmp_ok(Math::JS->new(94967295) ^ Math::JS->new(-100000), '==', -94933857, "94967295 ^ -100000 == -94933857");
cmp_ok(Math::JS->new(-94967295) ^ Math::JS->new(200000), '==', -95033535, "94967295 ^ 200000 == -95033535");
cmp_ok(Math::JS->new(429496) ^ Math::JS->new(-100734), '==', -459974, "429496 ^ -100734 == -459974");





done_testing();

__END__
#######################################################
#######################################################
# TODO
The following tests should all pass when (if ever) Math::JS allows bit operations
on values that are larger than 32 bit.

for(0..33) {
  cmp_ok(Math::JS->new(9007199254740991) >> $_, '==', -1, "9007199254740991 >> $_ => -1");
}

for(1..31, 33) {
  cmp_ok(Math::JS->new(-9007199254740991) >> $_, '==', 0, "-9007199254740991 >> $_ => 0");
}

for(0, 32) {
  cmp_ok(Math::JS->new(-9007199254740991) >> $_, '==', 1, "-9007199254740991 >> $_ => 1");
}

cmp_ok(Math::JS->new(90071992500000) >> 1, '==', -1030815856, '9007199250000000 >> 1 => -1030815856');
cmp_ok(Math::JS->new(90071992500000) >> 4, '==', -128851982,  '9007199250000000 >> 4 => -128851982');
cmp_ok(Math::JS->new(-90071992500000) >> 1, '==', 1030815856, '-9007199250000000 >> 1 => 1030815856');
cmp_ok(Math::JS->new(-90071992500000) >> 4, '==', 128851982,  '-9007199250000000 >> 4 => 128851982');

cmp_ok(Math::JS->new(90071992500000) << 1, '==', 171703872, '9007199250000000 << 1 => 171703872');
cmp_ok(Math::JS->new(90071992500000) << 4, '==', 1373630976,  '9007199250000000 << 4 => 1373630976');
cmp_ok(Math::JS->new(-90071992500000) << 1, '==', -171703872, '-9007199250000000 << 1 => -171703872');
cmp_ok(Math::JS->new(-90071992500000) << 4, '==', -1373630976,  '-9007199250000000 << 4 => -1373630976');

cmp_ok(Math::JS->new(9007199250000000) >> 1, '==', -2370496, '9007199250000000 >> 1 => -2370496');
cmp_ok(Math::JS->new(9007199250000000) >> 4, '==', -296312,  '9007199250000000 >> 4 => -296312');

cmp_ok(Math::JS->new(-9007199254740000) >> 1, '==', 496, '-9007199254740000 >> 1 => 496');
cmp_ok(Math::JS->new(-9007199254740000) >> 4, '==', 62,  '-9007199254740000 >> 1 => 62');
cmp_ok(Math::JS->new(-4294967296) >> 1, '==',  0, '-4294967296 >> 1 => 0');
cmp_ok(Math::JS->new(-4294967299) >> 1, '==', -2, '-4294967299 >> -1 => -2');

my $arg = (2 ** 55) + 1172;
cmp_ok(Math::JS->new($arg) >> 1, '==', 584, "$arg >> 1 => 584");
cmp_ok(Math::JS->new(-$arg) >> 1, '==', 584, "$arg >> 1 => -584");

cmp_ok(Math::JS->new(1234.7) >> 1, '==', 617, '1234.7 >> 1 => 617');

cmp_ok(Math::JS->new(9007199254740991) & Math::JS->new(9007199254740991), '==', -1, '9007199254740991 & 9007199254740991 => -1');
cmp_ok(Math::JS->new(9007199254740991) & Math::JS->new(4294967295), '==', -1, '9007199254740991 & 4294967295 => -1');
cmp_ok(Math::JS->new(9007199254740991) & Math::JS->new(429496729), '==', 429496729, '9007199254740991 & 429496729 => 429496729');

