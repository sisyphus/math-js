
=pod

=head1 NAME

  Math::JS - Emulate JavaScript arithmetic in perl

=head1 DESCRIPTION

  Assign numeric values to Math::JS objects, and perform arithmetic
  operations on those values according to the rules that JavaScript
  uses.
  The main interest here is to replicate the 32-bit integer arithmetic
  as performed by JavaScript.
  For the floating point arithmetic, JavaScript behaves identically to
  perls configured to have $Config{nvsize} of 8, and therefore the building
  of Math::JS is restricted to perls that have that configuration.

=head1 SYNOPSIS

  use warnings; use strict;
  use Math::JS;

  my $js = Math::JS ->new(2147483648);
  $js >>= 1;
  print $js;
  # Outputs -1073741824 (same as JavaScript)

=head1 FUNCTIONS

  my $ok = is_ok($arg); # used internally.

    This function is not exported but can be accessed as Math::JS::is_ok($arg).
    It returns true if $arg is suitable for use in an arithmetic operation
    with a Math::JS object.
    Else it returns false.

  No other functions are provided, except for the subs that are responsible
  for overloading the  '+', '-', '*', '/', '**', '++', '--', '>=', '<=',
  '==', '!=', '>', '<', '<=>', '""', '+=', '-=', '*=', '/=', '**=', '&',
  '|', '^', '~', '&=',  '|=', '^=' (and perhaps other) operations.

=head1 DISPLAYING FLOATING POINT VALUES

  This warrants some specific documentation because it's not trivial to
  get Perl to print out the values in the same form as JavaScript does.
  (That's in addition to the fact that perl's print() function likes to
  present inaccurate values, whereas JavaScript does not.)

  If you have Math::MPFR (version 4.05 or later), then the Math::JS
  overloading of print() will (by default) present the same value as
  JavaScript does.

  TODO: Add the option of using Math::Ryu, which installs easily on
        most systems.

  Else, without Math::MPFR, the overloaded print() uses perl's sprintf()
  function, which might present more decimal mantissa digits than
  JavaScript does - though both forms will accurately represent exactly the
  same double-precision value.

  NOTE:
      The default behaviour of using Math::MPFR functionality (when
      available) can be overridden by defining $ENV{NO_MPFR}

=head1 LICENSE

  This program is free software; you may redistribute it and/or
  modify it under the same terms as Perl itself.
  Copyright 2024, Sisyphus

=head1 AUTHOR

  Sisyphus <sisyphus at(@) cpan dot (.) org>

=cut
