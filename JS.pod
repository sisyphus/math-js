
=pod

=head1 NAME

  Math::JS - Emulate JavaScript arithmetic in perl

=head1 DESCRIPTION

  Assign numeric values to Math::JS objects, and perform arithmetic
  operations on those values according to the rules that JavaScript
  uses.
  The main interest here is to replicate the 32-bit integer arithmetic
  as performed by JavaScript.
  However, some support for JS floating point arithmetic is provided. See
  the sections "ASSIGNING FLOATING POINT VALUES" and "DISPLAYING FLOATING
  POINT VALUES", below.

=head1 SYNOPSIS

  use warnings; use strict;
  use Math::JS;

  my $js = Math::JS ->new(2147483648);
  $js >>= 1;
  print $js;
  # Outputs -1073741824 (same as JavaScript)

=head1 FUNCTIONS

  my $ok = is_ok($arg); # used internally.

    This function is not exported but can be accessed as Math::JS::is_ok($arg).
    It returns true if $arg is allowed to be used in an arithmetic
    operation with a Math::JS object.
    Else it returns false.

  No other functions are provided, except for the subs that are responsible
  for overloading the  '+', '-', '*', '/', '**', '++', '--', '>=', '<=',
  '==', '!=', '>', '<', '<=>', '""', '+=', '-=', '*=', '/=', '**=', '&',
  '|', '^', '~', '&=',  '|=', '^=' and perhaps other operations.

=head1 ASSIGNING FLOATING POINT VALUES

  If your perl's NV size (Math::JS::NVSIZE) is 8 then it makes no
  difference whether you do:
  $x = Math::JS->new($p / $q);
   or:
  $x = Math::JS->new($p) / Math::JS->new($q);

  But if NV size is not 8, then the 2 forms are not necessarily
  equivalent, and the latter is safer (and recommended).
  Even then, it might be possible that the 2 methods produce different
  results - owing to double rounding.

=head1 DISPLAYING FLOATING POINT VALUES

  This warrants some specific documentation because it's not trivial to
  get Perl to print out the values in the same form as JavaScript does.
  (That's in addition to the fact that perl's print() function likes to
  present inaccurate values, whereas JavaScript does not.)

  If your perl's $Config{nvsize} == 8 && you have Math::MPFR (version 4.05 or
  later), then the Math::JS overloading of print() will (by default) present
  the same value as JavaScript does.

  Else, if your perl's $Config{nvsize} != 8 && you have Math::MPFR (version
  4.17 or later), then the Math::JS overloading of print() will (by default)
  present the same value as JavaScript does .... except for subnormal values.
  (TODO: I intend to eventually fix that little shortcoming.)
  For subnormal values, the overloaded print() function might present more
  decimal mantissa digits than JavaScript does - though both forms will
  accurately represent exactly the same double-precision value.

  Else, without Math::MPFR, the overloaded print() uses perl's sprintf()
  function, which might present more decimal mantissa digits than
  JavaScript does - though both forms will accurately represent exactly the
  same double-precision value.

  NOTE:
      The default behaviour of using Math::MPFR functionality (when
      available) can be overridden by defining $ENV{NO_MPFR}

=head1 LICENSE

  This program is free software; you may redistribute it and/or
  modify it under the same terms as Perl itself.
  Copyright 2024, Sisyphus

=head1 AUTHOR

  Sisyphus <sisyphus at(@) cpan dot (.) org>

=cut
